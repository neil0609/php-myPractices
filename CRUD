<?php
//object oriented programming
//database crud = create, rename, update, delete

/**$db_type = "mysql";
$db_name = "demo";
$db_host = "localhost";
$db_user = "root";
$db_password = " ";
 * 
 */

/* Connect to an ODBC database using driver invocation */
//$dsn = 'db_type:dbname=$db_name;host=db_host';
// $user = 'dbuser'; delete
// $password = 'dbpass'; delete


class CRUD extends PDO
{
    // define table to use
    public $table = null;
    
    /**
     * Instantiate a PDO Instance with CRUD functionality
     * 
     * @param string $db_type
     * @param string $db_name
     * @param string $db_host
     * @param string $db_user
     * @param string $db_password
     * 
     * @return void
     */
    
    public function __construct($db_type, $db_name, $db_host, $db_user, $db_password = " ")
    {
        try 
        {
        $dsn = "db_type:dbname=$db_name;host=$db_host";
        parent :: __construct($dsn, $db_user, $db_password);
        $this->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
        }
        catch(PDOException $e)
        {
            die($e->getMessage());
        }
        
  /*      try 
        {
        $dbh = new PDO($dsn, $db_user, $db_password);
        } 
        catch (PDOException $e) 
        {
        echo 'Connection failed: ' . $e->getMessage();
        }
*/    
    }
// -----------------------------------------------------------------------------

    /**
     * Select
     * 
     * @param mixed $columns string or array
     * @param array $data Must be Associative Array ['Column' => 'Value']
     * 
     * Return Array
     */
    
    public function select ($columns, $where = null)
    {
        $this->_isTableSet();
        
        if (is_array($columns))
        {
        $columns = implode(',', $columns);
        }                             
                
            $where_stmt = null;
            if (is_numeric($where))
                {
                    $primary = $this->table . '_id';
                    $where_stmt = " WHERE `$primary` = :primary_key";
                    $where = [
                        'primary_key => $where'
                    ];
                }
                elseif (is_array($where))
                {
                    // Build the Where Statement
                    $where_stmt = ' ';
                    foreach ($where as $_key => $_value)
                    {
                        $where_stmt .= "`$_key` = :$_key AND ";
                    }
                    $where_stmt = "WHERE" . rtrim($where_stmt, ' AND ');
                }
       

            echo "SELECT $columns FROM `{$this->table}` WHERE $where_stmt";
            $stmt = $this->prepare("SELECT $columns FROM `{$this->table}` $where_stmt");
            $stmt->execute($where);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
            //$crud->select('*', ['project_id' => 2]);
    }
    
// -----------------------------------------------------------------------------
  /**
   * Inserts data into database
   * @param array $data Must be Associative Array ['Column' => 'Value']
   * @return mixed Boolean or insert_id
   */
    
    public function insert($data)
    {
        
        $this->_isTableSet();

        $keys_array = array_keys($data);
        $keys = '`'. implode('`, `', $keys_array) . '`';
        $params = ':'. implode(', :', $keys_array);

        $sth = $this->prepare("INSERT INTO `{$this->table}` ($keys) VALUES ($params)");
        $result = $sth->execute($data);
        
        if ($result == 1)
        {
            return $this->lastInsertId();
        }
        return false;
        
        // Return the insert ID
        // $crud->insert([
        //        'data' => 1,
        //        'data' => 2
        // ]);
    }
    
// -----------------------------------------------------------------------------
    
/**
 * Update
 * 
 * @param array $data  Associate key/value pairs to change
 * @param mixed $where Either an array or a numeric primary key index
 * 
 * @return integer Total affected rows
 */
    
    public function update($data, $where)
    {
        $this->_isTableSet();
        
        $set = ' ';
        foreach ($data as $_key => $value)
        {
            $set .= "`$_key` = :$_key,";
        }
        
        // Remove the trailing comma
        $set = rtrim($set, ',');
        
            if (is_numeric($where))
            {
                $primary = $this->table . '_id';
                $where_stmt = "`$primary` = :primary_key";
                $where = [
                    'primary_key => $where'
                ];
            }
            elseif (is_array($where))
            {
                // Build the Where Statement
                $where_stmt = ' ';
                foreach ($where as $_key => $_value)
                {
                    $where_stmt .= "`$_key` = :$_key AND ";
                }
                $where_stmt = rtrim($where_stmt, ' AND ');
            }
            
             // Combine the DATA and WHERE to bind to both parameters
            $data = array_merge($data, $where);
            
            $sth = $this->prepare("UPDATE `{$this->table}` SET $set WHERE $where_stmt");
            $sth->execute($where);
        
        //UPDATE table SET `name` = :something, `other` = :other
        //WHERE x = :x AND y = :y
   
        // Return True/False (bool)
        // $crud->update([
        //        'data' => 1
        // ], [
        // 'project_id' => 1
        // ]);
    }
    
// -----------------------------------------------------------------------------
    
    /**
     * Delete
     * 
     * @param mixed $where  Either an array or a numeric primary key index
     * @return boolean
     */
    
    public function delete($where)
    {
        $this->_isTableSet();
        
        if (is_numeric($where))
        {
            $primary = $this->table . '_id';
            $where_stmt = "`$primary` = :primary_key";
            $where = [
                'primary_key => $where'
            ];
        }
        elseif (is_array($where))
        {
            // Build the Where Statement
            $where_stmt = ' ';
            foreach ($where as $_key => $_value)
            {
                $where_stmt .= "`$_key` = :$_key AND ";
            }
            $where_stmt = rtrim($where_stmt, ' AND ');
        }



        
        $sth = $this->prepare("DELETE FROM `{$this->table}` WHERE $where_stmt");
        $sth->execute($where);
        
        // DELETE FROM table WHERE 1
        // Return True/False (bool)
        //$curd->delete(['project_id' => 2]);
    }

// -----------------------------------------------------------------------------
    private function _isTableSet(){
        if ($this->table == null)
        {
            die('You must set the $crud->table');
        }
    }
    
}


/**$db_type = "mysql";
$db_name = "demo";
$db_host = "localhost";
$db_user = "root";
$db_password = " ";
*/


$crud = new CRUD('mysql', 'demo', 'localhost', 'root', '');
$crud->table = 'phone';

/**echo $crud->insert([
        'name' => 'General',
        'brand_id' => 2
    ]);
 * 
 */

//echo $crud->delete(11);
//echo $crud->delete(['name' => 'General']);


//$crud->update(['name => 'WORD'], 2);
//$crud->update(['name' => 'WORD'], ['brand_id' => 2]);
echo "<hr />";
echo "<pre>";
//$result = $crud->select(['phone_id', 'name'],['brand_id => 2]);
//$result = $crud->select('phone_id, name', 2);
//$result = $crud->select('phone_id, name');
//$result = $crud->select('phone_id, name', ['brand_id => 2]);
//print_r($result);





/** did not set table name
$crud->select('table_name', '*', [
        'project_id' => 2
]);

$curd->insert('table_name', [
        'data' => 1,
        'data' => 2
]);

$crud->update('table_name', [
        'data' => 1
], [
    // where
        'project_id' => 1
]);
                              // where
$crud->delete('table name', ['project_id' => 2]);
 * 
 */

//set table name




